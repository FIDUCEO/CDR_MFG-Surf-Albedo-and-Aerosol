/**********************************************************************
* The copyrights for the GEDAP algorithm and computer codes, remain with 
* Rayference SPRL as an Intellectual Property Right 
*
* Any use, in source and binary forms, distribution, modification, for 
* commercial, business, research and any other purposes is
*
*                           *** STRICTLY FORBIDDEN ***
*
* GEDAP may not be distributed or sold to any other commercial, 
* business, research or other partners under any circumstances.
* In any case this comment is part of the code as Software Legal Information,
* it cannot be modified and must be kept as header for all source codes in 
* which it appears.
*
* All documents and software are protected under the international Copyright 
* Laws, and Rayference SPRL reserves all rights.
*
*
* Author       :     Rayference Copyright (c) 
*
*********************************************************************/
/*
 * TileMaker.h
 *
 *  Created on: 14 Oct 2015
 *      Author: alix
 */

#ifndef TILE_MAKER_MODULE_TILEMAKER_H_
#define TILE_MAKER_MODULE_TILEMAKER_H_

#include "../Common/Global_header.h"
#include "../Common/Logger.h"
#include "../Common/Data.h"
#include "../Common/TileDimensions.h"
#include "../Tiles/TileNetCDFManager.h"

#include "Readers/StaticDataReader.h"
#include "Readers/ModelParamsReader.h"

//#define DEBUG_TILE_MAKER

/**
 * \defgroup Tile_Maker
 * \brief    Module responsible for the pre-processing, i.e. to aggregate external data and create the Static and Input netCDF files.
 * \warning  Only SEVIRI radiometer is taken into account currently:
 *           - The Reader classes assume that all the external data to be read are already in the SEVIRI projection
 *           - The angles are computed separately using the program located in:\n
 *             svn://rayser01/RAYFERENCE/Algorithms/GEDAP/SEVIRI_Angles (only SEVIRI)
 *           - The static data (latitude, longitude, land cover, elevation) are projected on the SEVIRI grid using the program located in:\n
 *             svn://rayser01/RAYFERENCE/Algorithms/GEDAP/SEVIRI_Land_Cover_and_Elevation
 *           - The ECMWF data (TCO3, TCWV, surface pressure, wind speed, wind direction) are projected on the SEVIRI grid using the program SOSIE located in:\n
 *             svn://rayser01/RAYFERENCE/Algorithms/GEDAP/SOSIE_ECMWF_interpolation
 *           - The external files containing the cloud mask are in the SEVIRI projection.
 * \todo     Adapt all classes of the Tile_Maker module to be able to aggregate data for other satellites/radiometers.
 */


/**
 * \ingroup Tile_Maker
 *
 * \brief   Main class of the Tile_Maker module. It manages the creation of Static and Input Tile netCDF files.
 * \details This class is written as an interface dedicated to be used by the Python Scheduler module.
 */
class TileMaker
{
protected:
	std::vector<TileDimensions> v_tiles;
	std::vector<std::string> v_bands;

    std::shared_ptr<TileNetCDFManager>	m_tile_netCDF_manager;
    std::shared_ptr<ModelParamsReader> 	m_modelParamsReader;

	std::shared_ptr<AbstractLogger> logger;

public:
    explicit TileMaker(const std::vector<std::string> &v_bands,
					   const std::vector<TileDimensions_Tuple> &v_tiles_as_tuples,
					   std::shared_ptr<AbstractLogger> logger);

    virtual ~TileMaker() = default;
//    virtual ~TileMaker() {  logger->write_log(LogLevel::_DEBUG_, "TileMaker", "~TileMaker",
//                                                           "Calling destructor TileMaker");}
	/**
	 * \brief Generates the Static-Tile netCDF files.
	 * \param m_static_data_files       map with items (key = tile ID, value = path of the Static-Tile netCDF file to create)
	 * \param path_lat_lon_file         path to the file containing the latitude and longitude of pixels
	 * \param path_land_sea_mask_file   path to the file containing the surface type of pixels
	 * \param path_elevation_file       path to the file containing the elevation of pixels
	 * \param path_aerosol_elevation_file path to the file containing the aerosol elevation of pixels
	 */
	void
	make_static_data_tile(std::map<std::string, std::string> m_static_data_files, const std::string path_lat_lon_file,
						  const std::string path_land_sea_mask_file, const std::string path_elevation_file,
						  const bool cold_start);

	/**
	 * \brief    Read the first ERA-INTERIM file of the accumulation period. The path to the file is generated by the Python code.
	 * \warning  Must be called each time you start a new accumulation period.
	 */
    void read_first_ERA_INTERIM_file(const std::string path_modparams_file);

};

#endif /* TILE_MAKER_MODULE_TILEMAKER_H_ */
